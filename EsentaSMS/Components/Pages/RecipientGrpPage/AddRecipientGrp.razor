
@inject IRecipientGrpService RecipientGrpService

<div class="overlay">
    <div class="card shadow border-0 align-items-center">
        <div class=" card-header">
            <div class="row" style="background-color:darkslateblue">
                <div class="col text-warning">Add RecipientGrp Details </div>
                <div class="col-2"><button type="button" class=" btn btn-outline-danger" @onclick="CloseOverlayAsync">X</button></div>
            </div>

        </div>

        <div class="card-body">
            @if (RecipientGrp != null)
            {
                <EditForm Model="RecipientGrp" OnValidSubmit="SaveRecipientAsync">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                    <div class="form-group">
                        <label for="GroupName">Group Name</label>
                        <InputText id="GroupName" placeholder="GroupName" class="form-control" @bind-Value="RecipientGrp.GroupName"></InputText>
                    </div>

                    <br />
                    <button type="submit" class="btn btn-primary ">Save</button>
                </EditForm>
            }

        </div>
    </div>
</div>

<br />


@code {
    private RecipientGrp? RecipientGrp = new();

    [Parameter]
    public EventCallback<RecipientGrp> RecipientGrpAdded { get; set; }

    [Parameter]
    public bool IsOverlayVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsOverlayVisibleChanged { get; set; }

    
    private async Task SaveRecipientAsync()
    {
        if (this.RecipientGrp != null)
        {
            var Added = await RecipientGrpService.AddRecipientGrpAsync(RecipientGrp);
            if (Added is not null)
            {
                await RecipientGrpAdded.InvokeAsync(RecipientGrp);
                await CloseOverlayAsync();
            }
            else
            {
                Console.WriteLine("Adding new Recipient group Failed");
            }
        }
    }
    private async Task CloseOverlayAsync()
    {
        await IsOverlayVisibleChanged.InvokeAsync(false);
    }
}
